import { useState, useEffect } from "react";
import Head from "next/head";
import axios from "axios";

interface ListItem {
  id: string;
  content: string;
  isCompleted: boolean;
}

interface Todo {
  _id: string;
  title: string;
  lists: ListItem[];
}

export default function Home() {
  const [todos, setTodos] = useState<Todo[]>([]);
  const [taskTitle, setTaskTitle] = useState("");
  const [newLists, setNewLists] = useState<string[]>([""]);

  useEffect(() => {
    const fetchTodos = async () => {
      try {
        const response = await axios.get<Todo[]>("/api/todo");
        setTodos(response.data);
      } catch (error) {
        console.error("Error fetching todos:", error);
      }
    };
    fetchTodos();
  }, []);

  const addNewListInput = () => {
    //buat menambah list baru / add
    setNewLists([...newLists, ""]);
  };

  const removeListInput = (index: number) => {
    //untuk menghapus list / remove
    setNewLists(newLists.filter((_, i) => i !== index));
  };

  const handleListChange = (index: number, value: string) => {
    const updatedLists = [...newLists];
    updatedLists[index] = value;
    setNewLists(updatedLists);
  };

  const addTask = async () => {
    if (taskTitle && newLists.some((list) => list.trim())) {
      const task: Omit<Todo, "_id"> = {
        title: taskTitle,
        lists: newLists
          .filter((list) => list.trim())
          .map((list) => ({
            id:
              new Date().toISOString() +
              Math.random().toString(36).substring(2),
            content: list,
            isCompleted: false,
          })),
      };

      try {
        const response = await axios.post<Todo>("/api/todo", task);
        setTodos([...todos, response.data]);
        setTaskTitle("");
        setNewLists([""]);
      } catch (error) {
        console.error("Error adding task:", error);
      }
    }
  };

  const toggleListCompletion = async (
    taskId: string,
    listId: string,
    isCompleted: boolean
  ) => {
    try {
      await axios.patch(`/api/todo?id=${taskId}`, {
        listId,
        isCompleted: !isCompleted,
      });
      setTodos(
        todos.map((todo) =>
          todo._id === taskId
            ? {
                ...todo,
                lists: todo.lists.map((list) =>
                  list.id === listId
                    ? { ...list, isCompleted: !isCompleted }
                    : list
                ),
              }
            : todo
        )
      );
    } catch (error) {
      console.error("Error toggling list completion:", error);
    }
  };

  const deleteTask = async (id: string) => {
    try {
      await axios.delete("/api/todo", { params: { id } });
      setTodos(todos.filter((todo) => todo._id !== id));
    } catch (error: any) {
      console.error(
        "Error deleting task:",
        error.response?.data || error.message
      );
      alert(error.response?.data?.message || "Failed to delete task");
    }
  };

  return (
    <>
      <Head>
        <title>Notes</title>
        <meta name="description" content="Generated by Create Next Stack." />
      </Head>

      <div className="flex justify-center items-center h-screen bg-slate-300">
        <div className="w-96">
          <h1
            className="text-4xl font-bold text-center mb-6"
            style={{ fontFamily: '"Quicksand", serif' }}
          >
            NOTES
          </h1>
          <div className="my-4">
            <input
              type="text"
              placeholder="Your Task Title"
              value={taskTitle}
              onChange={(e) => setTaskTitle(e.target.value)}
              className="border p-2 w-full mb-2 rounded-md"
            />
            <div>
              {newLists.map((list, index) => (
                <div key={index} className="flex items-center space-x-2 mb-2">
                  <input
                    type="text"
                    placeholder={`Activity List ${index + 1}`}
                    value={list}
                    onChange={(e) => handleListChange(index, e.target.value)}
                    className="border p-2 w-full rounded-md"
                  />
                  {newLists.length > 1 && (
                    <button
                      type="button"
                      onClick={() => removeListInput(index)}
                      className="text-red-500"
                    >
                      Remove
                    </button>
                  )}
                </div>
              ))}
              <button
                type="button"
                onClick={addNewListInput}
                className="bg-gray-500 text-white p-2 rounded-md"
              >
                Add List
              </button>
            </div>
            <button
              onClick={addTask}
              className="bg-blue-500 text-white p-2 w-full rounded-md mt-2"
              style={{ fontFamily: '"Quicksand", serif' }}
            >
              Add Task
            </button>
          </div>

          <div className="mt-6">
            {todos.map((todo) => (
              <div
                key={todo._id}
                className="bg-gray-100 p-4 mb-2 w-full rounded"
              >
                <h2 className="text-lg font-semibold mb-3">{todo.title}</h2>
                <div>
                  {todo.lists.map((list) => (
                    <div key={list.id} className="flex items-center space-x-2">
                      <input
                        type="checkbox"
                        checked={list.isCompleted}
                        onChange={() =>
                          toggleListCompletion(
                            todo._id,
                            list.id,
                            list.isCompleted
                          )
                        }
                        className="mr-2"
                      />
                      <span className={list.isCompleted ? "line-through" : ""}>
                        {list.content}
                      </span>
                    </div>
                  ))}
                  <button
                    onClick={() => deleteTask(todo._id)}
                    className="text-red-500 mt-2 ml-2"
                  >
                    Delete Task
                  </button>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </>
  );
}
